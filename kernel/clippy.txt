warning: useless use of `vec!`
  --> build.rs:56:22
   |
56 |     let incl_files = vec!["asm_def.asm"];
   |                      ^^^^^^^^^^^^^^^^^^^ help: you can use an array directly: `["asm_def.asm"]`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_vec
   = note: `#[warn(clippy::useless_vec)]` on by default

warning: useless use of `vec!`
  --> build.rs:58:17
   |
58 |       let files = vec![
   |  _________________^
59 | |         "boot/boot.asm",
60 | |         "boot/long_init.asm",
61 | |         "boot/ap_boot.asm",
...  |
66 | |         //"resources.asm",
67 | |     ];
   | |_____^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_vec
help: you can use an array directly
   |
58 ~     let files = ["boot/boot.asm",
59 +         "boot/long_init.asm",
60 +         "boot/ap_boot.asm",
61 +         "misc.asm",
62 +         "int.asm",
63 +         "syscall.asm",
64 ~         "sched.asm"];
   |

warning: `kernel` (build script) generated 2 warnings
warning: unused import: `self`
 --> /home/jack/projects/osdev/aurora_os/lib/aser/src/lib.rs:9:26
  |
9 | use core::fmt::{Display, self};
  |                          ^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused variable: `v`
  --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_counter.rs:46:29
   |
46 |     fn serialize_bool(self, v: bool) -> Result<Self::Ok, Self::Error> {
   |                             ^ help: if this is intentional, prefix it with an underscore: `_v`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `v`
  --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_counter.rs:50:27
   |
50 |     fn serialize_i8(self, v: i8) -> Result<Self::Ok, Self::Error> {
   |                           ^ help: if this is intentional, prefix it with an underscore: `_v`

warning: unused variable: `v`
  --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_counter.rs:54:28
   |
54 |     fn serialize_i16(self, v: i16) -> Result<Self::Ok, Self::Error> {
   |                            ^ help: if this is intentional, prefix it with an underscore: `_v`

warning: unused variable: `v`
  --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_counter.rs:58:28
   |
58 |     fn serialize_i32(self, v: i32) -> Result<Self::Ok, Self::Error> {
   |                            ^ help: if this is intentional, prefix it with an underscore: `_v`

warning: unused variable: `v`
  --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_counter.rs:62:28
   |
62 |     fn serialize_i64(self, v: i64) -> Result<Self::Ok, Self::Error> {
   |                            ^ help: if this is intentional, prefix it with an underscore: `_v`

warning: unused variable: `v`
  --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_counter.rs:66:28
   |
66 |     fn serialize_i128(self,v:i128) -> Result<Self::Ok,Self::Error> {
   |                            ^ help: if this is intentional, prefix it with an underscore: `_v`

warning: unused variable: `v`
  --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_counter.rs:70:27
   |
70 |     fn serialize_u8(self, v: u8) -> Result<Self::Ok, Self::Error> {
   |                           ^ help: if this is intentional, prefix it with an underscore: `_v`

warning: unused variable: `v`
  --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_counter.rs:74:28
   |
74 |     fn serialize_u16(self, v: u16) -> Result<Self::Ok, Self::Error> {
   |                            ^ help: if this is intentional, prefix it with an underscore: `_v`

warning: unused variable: `v`
  --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_counter.rs:78:28
   |
78 |     fn serialize_u32(self, v: u32) -> Result<Self::Ok, Self::Error> {
   |                            ^ help: if this is intentional, prefix it with an underscore: `_v`

warning: unused variable: `v`
  --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_counter.rs:82:28
   |
82 |     fn serialize_u64(self, v: u64) -> Result<Self::Ok, Self::Error> {
   |                            ^ help: if this is intentional, prefix it with an underscore: `_v`

warning: unused variable: `v`
  --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_counter.rs:86:29
   |
86 |     fn serialize_u128(self, v: u128) -> Result<Self::Ok,Self::Error> {
   |                             ^ help: if this is intentional, prefix it with an underscore: `_v`

warning: unused variable: `v`
  --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_counter.rs:90:28
   |
90 |     fn serialize_f32(self, v: f32) -> Result<Self::Ok, Self::Error> {
   |                            ^ help: if this is intentional, prefix it with an underscore: `_v`

warning: unused variable: `v`
  --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_counter.rs:94:28
   |
94 |     fn serialize_f64(self, v: f64) -> Result<Self::Ok, Self::Error> {
   |                            ^ help: if this is intentional, prefix it with an underscore: `_v`

warning: unused variable: `v`
  --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_counter.rs:98:29
   |
98 |     fn serialize_char(self, v: char) -> Result<Self::Ok, Self::Error> {
   |                             ^ help: if this is intentional, prefix it with an underscore: `_v`

warning: unused variable: `v`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_counter.rs:102:28
    |
102 |     fn serialize_str(self, v: &str) -> Result<Self::Ok, Self::Error> {
    |                            ^ help: if this is intentional, prefix it with an underscore: `_v`

warning: unused variable: `v`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_counter.rs:106:30
    |
106 |     fn serialize_bytes(self, v: &[u8]) -> Result<Self::Ok, Self::Error> {
    |                              ^ help: if this is intentional, prefix it with an underscore: `_v`

warning: unused variable: `name`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_counter.rs:124:36
    |
124 |     fn serialize_unit_struct(self, name: &'static str) -> Result<Self::Ok, Self::Error> {
    |                                    ^^^^ help: if this is intentional, prefix it with an underscore: `_name`

warning: unused variable: `name`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_counter.rs:130:9
    |
130 |         name: &'static str,
    |         ^^^^ help: if this is intentional, prefix it with an underscore: `_name`

warning: unused variable: `variant_index`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_counter.rs:131:9
    |
131 |         variant_index: u32,
    |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_variant_index`

warning: unused variable: `variant`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_counter.rs:132:9
    |
132 |         variant: &'static str,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_variant`

warning: unused variable: `name`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_counter.rs:157:9
    |
157 |         name: &'static str,
    |         ^^^^ help: if this is intentional, prefix it with an underscore: `_name`

warning: unused variable: `variant_index`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_counter.rs:158:9
    |
158 |         variant_index: u32,
    |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_variant_index`

warning: unused variable: `variant`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_counter.rs:159:9
    |
159 |         variant: &'static str,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_variant`

warning: unused variable: `len`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_counter.rs:167:28
    |
167 |     fn serialize_seq(self, len: Option<usize>) -> Result<Self::SerializeSeq, Self::Error> {
    |                            ^^^ help: if this is intentional, prefix it with an underscore: `_len`

warning: unused variable: `len`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_counter.rs:171:30
    |
171 |     fn serialize_tuple(self, len: usize) -> Result<Self::SerializeTuple, Self::Error> {
    |                              ^^^ help: if this is intentional, prefix it with an underscore: `_len`

warning: unused variable: `name`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_counter.rs:177:9
    |
177 |         name: &'static str,
    |         ^^^^ help: if this is intentional, prefix it with an underscore: `_name`

warning: unused variable: `len`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_counter.rs:178:9
    |
178 |         len: usize,
    |         ^^^ help: if this is intentional, prefix it with an underscore: `_len`

warning: unused variable: `name`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_counter.rs:185:9
    |
185 |         name: &'static str,
    |         ^^^^ help: if this is intentional, prefix it with an underscore: `_name`

warning: unused variable: `variant_index`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_counter.rs:186:9
    |
186 |         variant_index: u32,
    |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_variant_index`

warning: unused variable: `variant`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_counter.rs:187:9
    |
187 |         variant: &'static str,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_variant`

warning: unused variable: `len`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_counter.rs:188:9
    |
188 |         len: usize,
    |         ^^^ help: if this is intentional, prefix it with an underscore: `_len`

warning: unused variable: `len`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_counter.rs:193:28
    |
193 |     fn serialize_map(self, len: Option<usize>) -> Result<Self::SerializeMap, Self::Error> {
    |                            ^^^ help: if this is intentional, prefix it with an underscore: `_len`

warning: unused variable: `name`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_counter.rs:199:9
    |
199 |         name: &'static str,
    |         ^^^^ help: if this is intentional, prefix it with an underscore: `_name`

warning: unused variable: `len`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_counter.rs:200:9
    |
200 |         len: usize,
    |         ^^^ help: if this is intentional, prefix it with an underscore: `_len`

warning: unused variable: `name`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_counter.rs:207:9
    |
207 |         name: &'static str,
    |         ^^^^ help: if this is intentional, prefix it with an underscore: `_name`

warning: unused variable: `variant_index`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_counter.rs:208:9
    |
208 |         variant_index: u32,
    |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_variant_index`

warning: unused variable: `variant`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_counter.rs:209:9
    |
209 |         variant: &'static str,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_variant`

warning: unused variable: `len`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_counter.rs:210:9
    |
210 |         len: usize,
    |         ^^^ help: if this is intentional, prefix it with an underscore: `_len`

warning: unused variable: `value`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_counter.rs:215:37
    |
215 |     fn collect_str<T: ?Sized>(self, value: &T) -> Result<Self::Ok, Self::Error>
    |                                     ^^^^^ help: if this is intentional, prefix it with an underscore: `_value`

warning: unused variable: `key`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_counter.rs:309:9
    |
309 |         key: &'static str,
    |         ^^^ help: if this is intentional, prefix it with an underscore: `_key`

warning: unused variable: `key`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_counter.rs:328:9
    |
328 |         key: &'static str,
    |         ^^^ help: if this is intentional, prefix it with an underscore: `_key`

warning: unused variable: `v`
  --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_serializer.rs:40:29
   |
40 |     fn serialize_bool(self, v: bool) -> Result<Self::Ok, Self::Error> {
   |                             ^ help: if this is intentional, prefix it with an underscore: `_v`

warning: unused variable: `v`
  --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_serializer.rs:44:27
   |
44 |     fn serialize_i8(self, v: i8) -> Result<Self::Ok, Self::Error> {
   |                           ^ help: if this is intentional, prefix it with an underscore: `_v`

warning: unused variable: `v`
  --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_serializer.rs:48:28
   |
48 |     fn serialize_i16(self, v: i16) -> Result<Self::Ok, Self::Error> {
   |                            ^ help: if this is intentional, prefix it with an underscore: `_v`

warning: unused variable: `v`
  --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_serializer.rs:52:28
   |
52 |     fn serialize_i32(self, v: i32) -> Result<Self::Ok, Self::Error> {
   |                            ^ help: if this is intentional, prefix it with an underscore: `_v`

warning: unused variable: `v`
  --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_serializer.rs:56:28
   |
56 |     fn serialize_i64(self, v: i64) -> Result<Self::Ok, Self::Error> {
   |                            ^ help: if this is intentional, prefix it with an underscore: `_v`

warning: unused variable: `v`
  --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_serializer.rs:60:28
   |
60 |     fn serialize_i128(self,v:i128) -> Result<Self::Ok,Self::Error> {
   |                            ^ help: if this is intentional, prefix it with an underscore: `_v`

warning: unused variable: `v`
  --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_serializer.rs:64:27
   |
64 |     fn serialize_u8(self, v: u8) -> Result<Self::Ok, Self::Error> {
   |                           ^ help: if this is intentional, prefix it with an underscore: `_v`

warning: unused variable: `v`
  --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_serializer.rs:68:28
   |
68 |     fn serialize_u16(self, v: u16) -> Result<Self::Ok, Self::Error> {
   |                            ^ help: if this is intentional, prefix it with an underscore: `_v`

warning: unused variable: `v`
  --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_serializer.rs:72:28
   |
72 |     fn serialize_u32(self, v: u32) -> Result<Self::Ok, Self::Error> {
   |                            ^ help: if this is intentional, prefix it with an underscore: `_v`

warning: unused variable: `v`
  --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_serializer.rs:86:28
   |
86 |     fn serialize_u128(self,v:u128) -> Result<Self::Ok,Self::Error> {
   |                            ^ help: if this is intentional, prefix it with an underscore: `_v`

warning: unused variable: `v`
  --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_serializer.rs:90:28
   |
90 |     fn serialize_f32(self, v: f32) -> Result<Self::Ok, Self::Error> {
   |                            ^ help: if this is intentional, prefix it with an underscore: `_v`

warning: unused variable: `v`
  --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_serializer.rs:94:28
   |
94 |     fn serialize_f64(self, v: f64) -> Result<Self::Ok, Self::Error> {
   |                            ^ help: if this is intentional, prefix it with an underscore: `_v`

warning: unused variable: `v`
  --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_serializer.rs:98:29
   |
98 |     fn serialize_char(self, v: char) -> Result<Self::Ok, Self::Error> {
   |                             ^ help: if this is intentional, prefix it with an underscore: `_v`

warning: unused variable: `v`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_serializer.rs:102:28
    |
102 |     fn serialize_str(self, v: &str) -> Result<Self::Ok, Self::Error> {
    |                            ^ help: if this is intentional, prefix it with an underscore: `_v`

warning: unused variable: `v`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_serializer.rs:106:30
    |
106 |     fn serialize_bytes(self, v: &[u8]) -> Result<Self::Ok, Self::Error> {
    |                              ^ help: if this is intentional, prefix it with an underscore: `_v`

warning: unused variable: `value`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_serializer.rs:118:40
    |
118 |     fn serialize_some<T: ?Sized>(self, value: &T) -> Result<Self::Ok, Self::Error>
    |                                        ^^^^^ help: if this is intentional, prefix it with an underscore: `_value`

warning: unused variable: `name`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_serializer.rs:124:36
    |
124 |     fn serialize_unit_struct(self, name: &'static str) -> Result<Self::Ok, Self::Error> {
    |                                    ^^^^ help: if this is intentional, prefix it with an underscore: `_name`

warning: unused variable: `name`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_serializer.rs:130:9
    |
130 |         name: &'static str,
    |         ^^^^ help: if this is intentional, prefix it with an underscore: `_name`

warning: unused variable: `variant_index`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_serializer.rs:131:9
    |
131 |         variant_index: u32,
    |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_variant_index`

warning: unused variable: `variant`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_serializer.rs:132:9
    |
132 |         variant: &'static str,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_variant`

warning: unused variable: `name`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_serializer.rs:139:9
    |
139 |         name: &'static str,
    |         ^^^^ help: if this is intentional, prefix it with an underscore: `_name`

warning: unused variable: `value`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_serializer.rs:140:9
    |
140 |         value: &T,
    |         ^^^^^ help: if this is intentional, prefix it with an underscore: `_value`

warning: unused variable: `name`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_serializer.rs:149:9
    |
149 |         name: &'static str,
    |         ^^^^ help: if this is intentional, prefix it with an underscore: `_name`

warning: unused variable: `variant_index`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_serializer.rs:150:9
    |
150 |         variant_index: u32,
    |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_variant_index`

warning: unused variable: `variant`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_serializer.rs:151:9
    |
151 |         variant: &'static str,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_variant`

warning: unused variable: `value`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_serializer.rs:152:9
    |
152 |         value: &T,
    |         ^^^^^ help: if this is intentional, prefix it with an underscore: `_value`

warning: unused variable: `len`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_serializer.rs:159:28
    |
159 |     fn serialize_seq(self, len: Option<usize>) -> Result<Self::SerializeSeq, Self::Error> {
    |                            ^^^ help: if this is intentional, prefix it with an underscore: `_len`

warning: unused variable: `len`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_serializer.rs:163:30
    |
163 |     fn serialize_tuple(self, len: usize) -> Result<Self::SerializeTuple, Self::Error> {
    |                              ^^^ help: if this is intentional, prefix it with an underscore: `_len`

warning: unused variable: `name`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_serializer.rs:169:9
    |
169 |         name: &'static str,
    |         ^^^^ help: if this is intentional, prefix it with an underscore: `_name`

warning: unused variable: `len`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_serializer.rs:170:9
    |
170 |         len: usize,
    |         ^^^ help: if this is intentional, prefix it with an underscore: `_len`

warning: unused variable: `name`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_serializer.rs:177:9
    |
177 |         name: &'static str,
    |         ^^^^ help: if this is intentional, prefix it with an underscore: `_name`

warning: unused variable: `variant_index`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_serializer.rs:178:9
    |
178 |         variant_index: u32,
    |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_variant_index`

warning: unused variable: `variant`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_serializer.rs:179:9
    |
179 |         variant: &'static str,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_variant`

warning: unused variable: `len`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_serializer.rs:180:9
    |
180 |         len: usize,
    |         ^^^ help: if this is intentional, prefix it with an underscore: `_len`

warning: unused variable: `len`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_serializer.rs:185:28
    |
185 |     fn serialize_map(self, len: Option<usize>) -> Result<Self::SerializeMap, Self::Error> {
    |                            ^^^ help: if this is intentional, prefix it with an underscore: `_len`

warning: unused variable: `name`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_serializer.rs:191:9
    |
191 |         name: &'static str,
    |         ^^^^ help: if this is intentional, prefix it with an underscore: `_name`

warning: unused variable: `len`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_serializer.rs:192:9
    |
192 |         len: usize,
    |         ^^^ help: if this is intentional, prefix it with an underscore: `_len`

warning: unused variable: `name`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_serializer.rs:199:9
    |
199 |         name: &'static str,
    |         ^^^^ help: if this is intentional, prefix it with an underscore: `_name`

warning: unused variable: `variant_index`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_serializer.rs:200:9
    |
200 |         variant_index: u32,
    |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_variant_index`

warning: unused variable: `variant`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_serializer.rs:201:9
    |
201 |         variant: &'static str,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_variant`

warning: unused variable: `len`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_serializer.rs:202:9
    |
202 |         len: usize,
    |         ^^^ help: if this is intentional, prefix it with an underscore: `_len`

warning: unused variable: `value`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_serializer.rs:207:37
    |
207 |     fn collect_str<T: ?Sized>(self, value: &T) -> Result<Self::Ok, Self::Error>
    |                                     ^^^^^ help: if this is intentional, prefix it with an underscore: `_value`

warning: unused variable: `value`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_serializer.rs:218:48
    |
218 |     fn serialize_element<T: ?Sized>(&mut self, value: &T) -> Result<(), Self::Error>
    |                                                ^^^^^ help: if this is intentional, prefix it with an underscore: `_value`

warning: unused variable: `value`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_serializer.rs:233:48
    |
233 |     fn serialize_element<T: ?Sized>(&mut self, value: &T) -> Result<(), Self::Error>
    |                                                ^^^^^ help: if this is intentional, prefix it with an underscore: `_value`

warning: unused variable: `value`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_serializer.rs:248:46
    |
248 |     fn serialize_field<T: ?Sized>(&mut self, value: &T) -> Result<(), Self::Error>
    |                                              ^^^^^ help: if this is intentional, prefix it with an underscore: `_value`

warning: unused variable: `value`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_serializer.rs:263:46
    |
263 |     fn serialize_field<T: ?Sized>(&mut self, value: &T) -> Result<(), Self::Error>
    |                                              ^^^^^ help: if this is intentional, prefix it with an underscore: `_value`

warning: unused variable: `key`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_serializer.rs:278:44
    |
278 |     fn serialize_key<T: ?Sized>(&mut self, key: &T) -> Result<(), Self::Error>
    |                                            ^^^ help: if this is intentional, prefix it with an underscore: `_key`

warning: unused variable: `value`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_serializer.rs:284:46
    |
284 |     fn serialize_value<T: ?Sized>(&mut self, value: &T) -> Result<(), Self::Error>
    |                                              ^^^^^ help: if this is intentional, prefix it with an underscore: `_value`

warning: unused variable: `key`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_serializer.rs:299:46
    |
299 |     fn serialize_field<T: ?Sized>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
    |                                              ^^^ help: if this is intentional, prefix it with an underscore: `_key`

warning: unused variable: `value`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_serializer.rs:299:65
    |
299 |     fn serialize_field<T: ?Sized>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
    |                                                                 ^^^^^ help: if this is intentional, prefix it with an underscore: `_value`

warning: unused variable: `key`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_serializer.rs:314:46
    |
314 |     fn serialize_field<T: ?Sized>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
    |                                              ^^^ help: if this is intentional, prefix it with an underscore: `_key`

warning: unused variable: `value`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/capability_serializer.rs:314:65
    |
314 |     fn serialize_field<T: ?Sized>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
    |                                                                 ^^^^^ help: if this is intentional, prefix it with an underscore: `_value`

warning: unused variable: `name`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/ser.rs:268:36
    |
268 |     fn serialize_unit_struct(self, name: &'static str) -> Result<Self::Ok, Self::Error> {
    |                                    ^^^^ help: if this is intentional, prefix it with an underscore: `_name`

warning: unused variable: `name`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/ser.rs:274:9
    |
274 |         name: &'static str,
    |         ^^^^ help: if this is intentional, prefix it with an underscore: `_name`

warning: unused variable: `variant`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/ser.rs:276:9
    |
276 |         variant: &'static str,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_variant`

warning: unused variable: `name`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/ser.rs:306:9
    |
306 |         name: &'static str,
    |         ^^^^ help: if this is intentional, prefix it with an underscore: `_name`

warning: unused variable: `variant`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/ser.rs:308:9
    |
308 |         variant: &'static str,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_variant`

warning: unused variable: `len`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/ser.rs:319:28
    |
319 |     fn serialize_seq(self, len: Option<usize>) -> Result<Self::SerializeSeq, Self::Error> {
    |                            ^^^ help: if this is intentional, prefix it with an underscore: `_len`

warning: unused variable: `name`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/ser.rs:331:9
    |
331 |         name: &'static str,
    |         ^^^^ help: if this is intentional, prefix it with an underscore: `_name`

warning: unused variable: `name`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/ser.rs:339:9
    |
339 |         name: &'static str,
    |         ^^^^ help: if this is intentional, prefix it with an underscore: `_name`

warning: unused variable: `variant`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/ser.rs:341:9
    |
341 |         variant: &'static str,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_variant`

warning: unused variable: `len`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/ser.rs:350:28
    |
350 |     fn serialize_map(self, len: Option<usize>) -> Result<Self::SerializeMap, Self::Error> {
    |                            ^^^ help: if this is intentional, prefix it with an underscore: `_len`

warning: unused variable: `name`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/ser.rs:358:9
    |
358 |         name: &'static str,
    |         ^^^^ help: if this is intentional, prefix it with an underscore: `_name`

warning: unused variable: `name`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/ser.rs:366:9
    |
366 |         name: &'static str,
    |         ^^^^ help: if this is intentional, prefix it with an underscore: `_name`

warning: unused variable: `variant`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/ser.rs:368:9
    |
368 |         variant: &'static str,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_variant`

warning: unused variable: `fields`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/de.rs:268:9
    |
268 |         fields: &'static [&'static str],
    |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fields`

warning: unused variable: `msg`
  --> /home/jack/projects/osdev/aurora_os/lib/aser/src/lib.rs:94:27
   |
94 |     fn custom<T: Display>(msg: T) -> Self {
   |                           ^^^ help: if this is intentional, prefix it with an underscore: `_msg`

warning: unused variable: `msg`
   --> /home/jack/projects/osdev/aurora_os/lib/aser/src/lib.rs:101:27
    |
101 |     fn custom<T: Display>(msg: T) -> Self {
    |                           ^^^ help: if this is intentional, prefix it with an underscore: `_msg`

warning: `aser` (lib) generated 110 warnings (run `cargo clippy --fix --lib -p aser` to apply 110 suggestions)
warning: unused import: `PAGE_SIZE`
 --> /home/jack/projects/osdev/aurora_os/lib/sys/src/syscalls.rs:4:17
  |
4 | use bit_utils::{PAGE_SIZE, Size};
  |                 ^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: `sys` (lib) generated 1 warning (run `cargo clippy --fix --lib -p sys` to apply 1 suggestion)
    Checking kernel v0.1.0 (/home/jack/projects/osdev/aurora_os/kernel)
warning: unused import: `core::mem::transmute`
 --> src/acpi/mod.rs:1:5
  |
1 | use core::mem::transmute;
  |     ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `core::slice`
 --> src/acpi/mod.rs:2:5
  |
2 | use core::slice;
  |     ^^^^^^^^^^^

warning: unused import: `crate::mem::phys_to_virt`
 --> src/acpi/mod.rs:4:5
  |
4 | use crate::mem::phys_to_virt;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `allocation`
  --> src/alloc/pmem_manager/mod.rs:17:42
   |
17 | use crate::mem::{Allocation, PageLayout, allocation};
   |                                          ^^^^^^^^^^

warning: unused import: `core::sync::atomic::AtomicUsize`
 --> src/arch/x64/mod.rs:3:5
  |
3 | use core::sync::atomic::AtomicUsize;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::alloc::HeapRef`
 --> src/cap/mod.rs:1:5
  |
1 | use crate::alloc::HeapRef;
  |     ^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `UserspaceBuffer`
 --> src/event/broadcast_event_emitter.rs:2:53
  |
2 | use super::{EventListenerRef, EventPoolListenerRef, UserspaceBuffer};
  |                                                     ^^^^^^^^^^^^^^^

warning: unused import: `bitflags::bitflags`
 --> src/syscall/memory.rs:1:5
  |
1 | use bitflags::bitflags;
  |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `process`
 --> src/syscall/memory.rs:8:25
  |
8 | use crate::{prelude::*, process};
  |                         ^^^^^^^

warning: unused import: `is_option_set`
  --> src/syscall/memory.rs:11:39
   |
11 | use super::{options_weak_autodestroy, is_option_set};
   |                                       ^^^^^^^^^^^^^

warning: unused macro definition: `syscall_0`
  --> src/syscall/mod.rs:40:14
   |
40 | macro_rules! syscall_0 {
   |              ^^^^^^^^^
   |
   = note: `#[warn(unused_macros)]` on by default

warning: unused macro definition: `syscall_5`
  --> src/syscall/mod.rs:88:14
   |
88 | macro_rules! syscall_5 {
   |              ^^^^^^^^^

warning: unused macro definition: `syscall_6`
   --> src/syscall/mod.rs:101:14
    |
101 | macro_rules! syscall_6 {
    |              ^^^^^^^^^

warning: unused macro definition: `syscall_7`
   --> src/syscall/mod.rs:115:14
    |
115 | macro_rules! syscall_7 {
    |              ^^^^^^^^^

warning: unused macro definition: `sysret_3`
   --> src/syscall/mod.rs:164:14
    |
164 | macro_rules! sysret_3 {
    |              ^^^^^^^^

warning: unused macro definition: `sysret_4`
   --> src/syscall/mod.rs:178:14
    |
178 | macro_rules! sysret_4 {
    |              ^^^^^^^^

warning: unused macro definition: `sysret_5`
   --> src/syscall/mod.rs:193:14
    |
193 | macro_rules! sysret_5 {
    |              ^^^^^^^^

warning: unused import: `core::char::MAX`
 --> src/config.rs:1:5
  |
1 | use core::char::MAX;
  |     ^^^^^^^^^^^^^^^

warning: unused import: `CapId`
 --> src/start_userspace.rs:4:21
  |
4 | use sys::{CapFlags, CapId, InitInfo, ProcessInitData, ProcessMemoryEntry};
  |                     ^^^^^

warning: unused import: `PaRef`
 --> src/start_userspace.rs:8:54
  |
8 | use crate::{prelude::*, alloc::{root_alloc, HeapRef, PaRef, root_alloc_page_ref, root_alloc_ref}, cap::{Capability, StrongCapability, mem...
  |                                                      ^^^^^

warning: unused imports: `root_alloc_page_ref`, `root_alloc_ref`
  --> src/main.rs:50:13
   |
50 | use alloc::{root_alloc_page_ref, root_alloc_ref};
   |             ^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^

warning: unused import: `VirtAddrSpace`
  --> src/main.rs:55:15
   |
55 | use process::{VirtAddrSpace, get_kernel_process};
   |               ^^^^^^^^^^^^^

warning: unused import: `PageAllocator`
 --> src/alloc/linked_list_allocator.rs:5:35
  |
5 | use super::{HeapAllocator, PaRef, PageAllocator};
  |                                   ^^^^^^^^^^^^^

warning: unused variable: `key`
   --> src/container/btree_map.rs:247:30
    |
247 |     pub fn remove(&mut self, key: &K) -> Option<V> {
    |                              ^^^ help: if this is intentional, prefix it with an underscore: `_key`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `old_process`
   --> src/sched/mod.rs:102:9
    |
102 |         old_process,
    |         ^^^^^^^^^^^ help: try ignoring the field: `old_process: _`

warning: the following explicit lifetimes could be elided: 'a
  --> src/acpi/madt.rs:58:13
   |
58 |     fn elem<'a>(this: WithTrailer<'a, Self>) -> Self::Elem<'a> {
   |             ^^                    ^^                       ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes
   = note: `#[warn(clippy::needless_lifetimes)]` on by default
help: elide the lifetimes
   |
58 -     fn elem<'a>(this: WithTrailer<'a, Self>) -> Self::Elem<'a> {
58 +     fn elem(this: WithTrailer<'_, Self>) -> Self::Elem<'_> {
   |

warning: docs for unsafe trait missing `# Safety` section
  --> src/alloc/heap_allocator.rs:13:1
   |
13 | pub unsafe trait HeapAllocator: Send + Sync {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc
   = note: `#[warn(clippy::missing_safety_doc)]` on by default

warning: all variants have the same postfix: `Allocator`
  --> src/alloc/heap_allocator.rs:40:1
   |
40 | / enum HeapRefInner {
41 | |     MainAllocator(&'static LinkedListAllocator),
42 | |     InitAllocator(*const LinkedListAllocator),
43 | |     CapAllocator(CapAllocatorWrapper),
44 | | }
   | |_^
   |
   = help: remove the postfixes and use full paths to the variants instead of glob imports
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#enum_variant_names
   = note: `#[warn(clippy::enum_variant_names)]` on by default

warning: docs for unsafe trait missing `# Safety` section
  --> src/alloc/page_allocator.rs:14:1
   |
14 | pub unsafe trait PageAllocator: Send + Sync {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: `if` chain can be rewritten with `match`
   --> src/alloc/pmem_manager/pmem_allocator.rs:368:9
    |
368 | /         if old_level > new_level {
369 | |             // allocation needs to be grown
370 | |
371 | |             // panic safety: we know old_node has a parent since there is a level larger than it
...   |
422 | |             Some(allocation)
423 | |         }
    | |_________^
    |
    = help: consider rewriting the `if` chain to use `cmp` and `match`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#comparison_chain
    = note: `#[warn(clippy::comparison_chain)]` on by default

error: incorrect implementation of `clone` on a `Copy` type
   --> src/cap/mod.rs:176:29
    |
176 |       fn clone(&self) -> Self {
    |  _____________________________^
177 | |         StaticCapability {
178 | |             object: self.object,
179 | |             id: self.id,
180 | |         }
181 | |     }
    | |_____^ help: change this to: `{ *self }`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#incorrect_clone_impl_on_copy_type
    = note: `#[deny(clippy::incorrect_clone_impl_on_copy_type)]` on by default

warning: this loop could be written as a `for` loop
   --> src/container/vec.rs:558:9
    |
558 |         while let Some(_) = self.next() {}
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for _ in self.by_ref()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#while_let_on_iterator
    = note: `#[warn(clippy::while_let_on_iterator)]` on by default

warning: this operation has no effect
  --> src/int/apic/io_apic.rs:14:1
   |
14 | / /// Specifies how a hardware interrupt sent to the io apic is delivered to local apics
15 | | #[bitfield]
16 | | #[repr(u64)]
17 | | #[derive(Debug, Clone, Copy)]
...  |
47 | |     dest: u8,
48 | | }
   | |_^ help: consider reducing it to: `vec: u8`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#identity_op
   = note: `#[warn(clippy::identity_op)]` on by default

warning: this operation has no effect
  --> src/int/apic/io_apic.rs:14:1
   |
14 | / /// Specifies how a hardware interrupt sent to the io apic is delivered to local apics
15 | | #[bitfield]
16 | | #[repr(u64)]
17 | | #[derive(Debug, Clone, Copy)]
...  |
47 | |     dest: u8,
48 | | }
   | |_^ help: consider reducing it to: `vec: u8`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#identity_op

warning: this operation has no effect
  --> src/int/apic/local_apic.rs:21:1
   |
21 | / #[repr(u32)]
22 | | #[derive(Debug, Clone, Copy)]
23 | | struct SpuriousReg {
24 | |     vec: u8,
...  |
32 | |     #[skip] __: B19,
33 | | }
   | |_^ help: consider reducing it to: `vec: u8`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#identity_op

warning: this operation has no effect
  --> src/int/apic/local_apic.rs:49:1
   |
49 | / /// Format for command register, which is used to send ipi
50 | | #[bitfield]
51 | | #[repr(u64)]
52 | | #[derive(Debug, Clone, Copy)]
...  |
85 | |     dest: u8,
86 | | }
   | |_^ help: consider reducing it to: `vector: u8`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#identity_op

warning: this operation has no effect
   --> src/int/apic/local_apic.rs:189:1
    |
189 | / /// Lvt entry maps interrupt sources from the local apic to interrupt vectors
190 | | #[bitfield]
191 | | #[repr(u32)]
192 | | #[derive(Debug, Clone, Copy)]
...   |
222 | |     #[skip] __: B13
223 | | }
    | |_^ help: consider reducing it to: `vec: u8`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#identity_op

warning: manual slice size calculation
   --> src/mem/range.rs:663:59
    |
663 |         Self::new(VirtAddr::new(value.as_ptr() as usize), value.len() * size_of::<T>())
    |                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `core::mem::size_of_val(value)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_slice_size_calculation
    = note: `#[warn(clippy::manual_slice_size_calculation)]` on by default

warning: methods called `new` usually return `Self`
   --> src/process/vmem_manager/page_table.rs:110:2
    |
110 | /     pub fn new(
111 | |         allocer: &mut PaRef,
112 | |         flags: PageTableFlags,
113 | |     ) -> Option<PageTablePointer> {
...   |
128 | |         Some(PageTablePointer(addr | flags.bits()))
129 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_ret_no_self
    = note: `#[warn(clippy::new_ret_no_self)]` on by default

warning: the loop variable `level` is only used to index `page_table_indicies`
   --> src/process/vmem_manager/mod.rs:577:22
    |
577 |         for level in 0..depth {
    |                      ^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_range_loop
    = note: `#[warn(clippy::needless_range_loop)]` on by default
help: consider using an iterator
    |
577 |         for <item> in page_table_indicies.iter().take(depth) {
    |             ~~~~~~    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

warning: the loop variable `level` is used to index `page_table_indicies`
   --> src/process/vmem_manager/mod.rs:656:22
    |
656 |         for level in starting_depth..depth {
    |                      ^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_range_loop
help: consider using an iterator and enumerate()
    |
656 |         for (level, <item>) in page_table_indicies.iter().enumerate().take(depth).skip(starting_depth) {
    |             ~~~~~~~~~~~~~~~    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

warning: the loop variable `i` is only used to index `tables`
   --> src/process/vmem_manager/mod.rs:720:18
    |
720 |         for i in dealloc_start_index..depth {
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_range_loop
help: consider using an iterator
    |
720 |         for <item> in tables.iter().take(depth).skip(dealloc_start_index) {
    |             ~~~~~~    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

warning: `if` chain can be rewritten with `match`
   --> src/process/mod.rs:66:9
    |
66  | /         if new_size > old_size {
67  | |             let new_base_addr = mapping.addr + old_size;
68  | |
69  | |             let mapping_iter = memory_inner.iter_mapped_regions(
...   |
114 | |             Ok(old_size)
115 | |         }
    | |_________^
    |
    = help: consider rewriting the `if` chain to use `cmp` and `match`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#comparison_chain

warning: `if` chain can be rewritten with `match`
   --> src/process/mod.rs:544:13
    |
544 | /             if new_page_size > old_page_size {
545 | |                 unsafe {
546 | |                     memory_inner.resize_in_place(new_page_size)?;
547 | |                 }
...   |
576 | |                 Ok(memory_inner.size_pages())
577 | |             }
    | |_____________^
    |
    = help: consider rewriting the `if` chain to use `cmp` and `match`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#comparison_chain

warning: methods with the following characteristics: (`to_*` and `self` type is `Copy`) usually take `self` by value
  --> src/sched/thread.rs:37:22
   |
37 |     pub fn to_status(&self, old_status: usize) -> usize {
   |                      ^^^^^
   |
   = help: consider choosing a less ambiguous name
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#wrong_self_convention
   = note: `#[warn(clippy::wrong_self_convention)]` on by default

warning: replacing an `Option` with `None`
   --> src/sched/mod.rs:105:9
    |
105 |     } = core::mem::replace(&mut *post_switch_data, None)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider `Option::take()` instead: `(*post_switch_data).take()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#mem_replace_option_with_none
    = note: `#[warn(clippy::mem_replace_option_with_none)]` on by default

warning: this function has too many arguments (9/7)
  --> src/syscall/debug.rs:14:1
   |
14 | / pub fn print_debug(
15 | |     options: u32,
16 | |     a1: usize,
17 | |     a2: usize,
...  |
23 | |     a8: usize,
24 | | ) -> KResult<()> {
   | |________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_arguments
   = note: `#[warn(clippy::too_many_arguments)]` on by default

warning: the following explicit lifetimes could be elided: 'a
  --> src/util/hwa_iter.rs:52:13
   |
52 |     fn elem<'a>(this: WithTrailer<'a, Self>) -> Self::Elem<'a>;
   |             ^^                    ^^                       ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes
help: elide the lifetimes
   |
52 -     fn elem<'a>(this: WithTrailer<'a, Self>) -> Self::Elem<'a>;
52 +     fn elem(this: WithTrailer<'_, Self>) -> Self::Elem<'_>;
   |

warning: the following explicit lifetimes could be elided: 'a
  --> src/util/mod.rs:20:32
   |
20 | pub fn iter_unaligned_pod_data<'a, T: AnyBitPattern>(data: &'a [u8]) -> impl Iterator<Item = T> + 'a {
   |                                ^^                           ^^                                    ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes
help: elide the lifetimes
   |
20 - pub fn iter_unaligned_pod_data<'a, T: AnyBitPattern>(data: &'a [u8]) -> impl Iterator<Item = T> + 'a {
20 + pub fn iter_unaligned_pod_data<T: AnyBitPattern>(data: &[u8]) -> impl Iterator<Item = T> + '_ {
   |

warning: the following explicit lifetimes could be elided: 'a
  --> src/mb2.rs:61:13
   |
61 |     fn elem<'a>(this: WithTrailer<'a, Self>) -> Self::Elem<'a> {
   |             ^^                    ^^                       ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes
help: elide the lifetimes
   |
61 -     fn elem<'a>(this: WithTrailer<'a, Self>) -> Self::Elem<'a> {
61 +     fn elem(this: WithTrailer<'_, Self>) -> Self::Elem<'_> {
   |

warning: `kernel` (bin "kernel") generated 52 warnings (3 duplicates)
error: could not compile `kernel` (bin "kernel") due to previous error; 52 warnings emitted
