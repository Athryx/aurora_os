use core::{slice, arch::asm};

extern "C" {
    fn main() -> !;
}

#[naked]
#[no_mangle]
pub extern "C" fn _aurora_startup() {
    unsafe {
        asm!(
            "pop rdi", // process data pointer
            "pop rsi", // process data size
            "pop rdx", // startup data pointer
            "pop rcx", // startup data size
            "call _rust_startup",
            options(noreturn)
        )
    }
}

#[no_mangle]
pub extern "C" fn _rust_startup(
    process_data: *mut usize,
    process_data_size: usize,
    startup_data: *mut u8,
    startup_data_size: usize,
) -> ! {
    let process_data = unsafe {
        slice::from_raw_parts(process_data, process_data_size / core::mem::size_of::<usize>())
    };

    aurora::init_allocation(process_data);

    let startup_data = unsafe {
        slice::from_raw_parts(startup_data, startup_data_size)
    };

    unsafe {
        // main is function generated by rust compiler which calls the start lang item
        // it is used only to resolve actual rust main method, it does not perform any other startup actions
        main()
    }
}